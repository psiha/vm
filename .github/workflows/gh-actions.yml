# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build & Test on Ubuntu, macOS, and Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
        c_compiler: [clang, msvc]
        include:
          - os: windows-latest
            c_compiler: msvc
            cpp_compiler: msvc
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: windows-latest
            build_type: Debug
          - os: ubuntu-latest
            c_compiler: msvc
          - os: macos-latest
            c_compiler: msvc

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup latest Xcode on MacOS
      if: matrix.os == 'macos-latest'
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest
    - name: Install LLVM and Clang on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod u+x llvm.sh
        sudo ./llvm.sh 18 all
        echo "PATH=/usr/lib/llvm-18/bin:$PATH" >> $GITHUB_ENV
        echo "LLVM_PATH=/usr/lib/llvm-18" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=/usr/lib/llvm-18/lib" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=/usr/lib/llvm-18/lib" >> $GITHUB_ENV
        echo "CC=/usr/lib/llvm-18/bin/clang" >> $GITHUB_ENV
        echo "CXX=/usr/lib/llvm-18/bin/clang++" >> $GITHUB_ENV
      shell: sh

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: >
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} &&
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target vm_unit_tests


    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: >
        cd ${{ steps.strings.outputs.build-output-dir }}/test && 
        ctest --build-config ${{ matrix.build_type }}
